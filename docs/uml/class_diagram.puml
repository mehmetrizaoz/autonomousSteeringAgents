@startuml class
class pathFollower{
  +pathFollower()
  +loop()
  {static}createPath()
  {static}myPath : path
}

class evade{
  +evade()
  {static}loop()
}

class wander{
  +wander()
  {static}loop()
}

class windy{
  +windy()
  {static}loop()
  {static}flow : flowField
}

class obstacleAvoidance{
  +obstacleAvoidance()
  {static}loop()
  {static}obstacles : obstacle
  {static}createObstacle()
}

class flee{
  +flee()
  {static}loop()
}

class flock{
  +floack()
  {static}loop()
}

class mouseFollower{
  +mouseFollower()
  {static}loop()
}

class steeringBehavior{
  +stayInArea() : pvector
  +inFlowField() : pvector
  +stayInPath() : pvector
  +seek() : pvector
  +separation() : pvector
  +cohesion() : pvector
  +align() : pvector
  +wander() : pvector
  +pursuit() : pvector
  +evade() : pvector
  +flee() : pvector
  +avoid() : pvector
  +setAngle()
}

class scenario {
  +scenario()
  +createAgent()
  +initGL()
  {static}refresh()
  {static}agents : agent
  {static}view : graphics
  {static}behavior : steeringBehavior
  {static}myColor : color
  {static}name : string
  +callback : void(*)()
  -createRandomAgents()
  -createStaticAgents()
  -createTroop()
}

class random {
  {static} createRandomArray()
}

class path {
  +path()
  +addPoint()
  +points : point
  +width : int
}

class agent{
  +agent()
  +~agent()
  +updatePosition()
  +setFeatures()
  +name : string
  +fillColor : color
  +position : point
  +velocity : pvector
  +targetPoint : point
  +maxSpeed : float
  +maxForce : float
  +steering : pvector
  +force : pvector
  +acceleration : pvector
  +desiredVelocity : pvector
  +mass : float
  +id : int
  +arrive : bool
}

class pvector{
  +pvector()
  +magnitude() : float
  +normalize() : pvector
  +div()
  +mul()
  +add()
  +limit()
  +getAngle() : float
  +dotProduct() : float
  +angleBetween()
  +print()
  +x : float
  +y : float
}

class obstacle{
  +p : point
  +r : float 
  +obstacle()  
}

class flowField{
  -uniformField : pvector 
  +flowField()
  +getField() : pvector
  -createFlowField()
  -perlinNoise()
  -randomField()
}

class obstacle{
  +p : point
  +r : float 
  +obstacle()  
}

class point{
  +x : float
  +y : float 
  +point()  
  +div()
  +mul()
  +print()
  +getNormalPoint()
}


class color{
  +R : float
  +G : float 
  +B : float
  +color()  
  +void createColors()
  +getColor() : color
}

class graphics{
  +drawAgent()
  +drawLine() 
  +drawPath()
  +drawPoint()
  +drawCircle()
  +drawText()
  +forceInScreen()
  +refreshScene()
  +getMousePosition() : point
  +void initGraphics()
  {static} timerEvent()
  {static} handleKeypress()
  {static} mouseButton()
  {static} handleResize()
  {static} mouseMove()
  {static} target_x : int
  {static} target_y : int
}

obstacle o-- point : has >
flowField "1" o-- pvector : has many >
agent "1" o-- pvector : has many >
agent "1" o-- point : has >
agent o-- color : has >
path "1" o-- point : is composed of many >
scenario "1" o-- agent : has many >
scenario o-- graphics : uses >
scenario o-- steeringBehavior : uses  >
scenario o-- color : uses >
scenario <|-- evade : is a <
scenario <|-- flee : is a <
scenario <|-- flock : is a <
scenario <|-- mouseFollower : is a <
scenario <|-- obstacleAvoidance : is a <
scenario <|-- pathFollower : is a <
scenario <|-- wander : is a <
scenario <|-- windy : is a <
obstacleAvoidance "1" o-- obstacle : has many >
pathFollower o-- path : uses >
windy "1" o-- flowField : has many >
scenario - random : uses >
@enduml
