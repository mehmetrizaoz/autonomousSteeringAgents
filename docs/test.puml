@startuml class
class agent {
  +agent()
  +~agent()
  +updatePosition()
  +setFeatures()
  +name : string
  +fillColor : color
  +position : point
  +velocity : pvector
  +targetPoint : point
  +maxSpeed : float
  +maxForce : float
  +steering : pvector
  +force : pvector
  +acceleration : pvector
  +desiredVelocity : pvector
  +mass : float
  +id : int
  +arrive : bool
}

class pvector {
  +pvector()
  +magnitude() : float
  +normalize() : pvector
  +div()
  +mul()
  +add()
  +limit()
  +getAngle() : float
  +dotProduct() : float
  +angleBetween()
  +print()
  +x : float
  +y : float
}

class obstacle {
  +p : point
  +r : float 
  +obstacle()  
}

class flowField {
  -uniformField : pvector 
  +flowField()
  +getField() : pvector
  -createFlowField()
  -perlinNoise()
  -randomField()
}

class obstacle {
  +p : point
  +r : float 
  +obstacle()  
}

class point {
  +x : float
  +y : float 
  +point()  
  +div()
  +mul()
  +print()
  +getNormalPoint()
}


class color {
  +R : float
  +G : float 
  +B : float
  +color()  
  +void createColors()
  +getColor() : color
}

class graphics {
  +drawAgent()
  +drawLine() 
  +drawPath()
  +drawPoint()
  +drawCircle()
  +drawText()
  +forceInScreen()
  +refreshScene()
  +getMousePosition() : point
  +void initGraphics()
  {static} timerEvent()
  {static} handleKeypress()
  {static} mouseButton()
  {static} handleResize()
  {static} mouseMove()
  {static} target_x : int
  {static} target_y : int
}

obstacle o-- point : has a
flowField "1" o-- pvector : has many
agent "1" o-- pvector : has many
agent "1" o-- point : has many
agent o-- color : has many

@enduml
